VAR
	A : McAxisTargetType := (JointAxis:=[0,0,-90,0,90,0],SlaveAxis:=[100]); (*Home value with tool faced torwards floor*)
	Aim1 : ARRAY[0..13] OF BOOL; (*defines aim pose of object number 1*)
	Aim2 : ARRAY[0..13] OF BOOL; (*defines aim pose of object number 2*)
	Aim4 : ARRAY[0..13] OF BOOL; (*defines aim pose of object number 4*)
	Camera_0 : CameraStruct; (*camera*)
	DemoY : INT; (*(DEMO)is used to help with selecting poses at DEMO*)
	DetectedScrew : USINT;
	DetectedScrewWasher : USINT;
	DetectedSquares : USINT; (*swuare detaction*)
	DetectedWrench : USINT;
	diDemo : BOOL; (*enables demo mode*)
	doMagnet : BOOL; (*MAgnet contorl*)
	doVisError : BOOL; (*vision error output*)
	gActPos : ARRAY[0..13] OF INT := [2(0),1,2(0),2,0,4,6(0)]; (*table of actual positions of elements *)
	gAimPos : ARRAY[0..13] OF INT := [5(0),1,0,2,5(0),4]; (*target  positions *)
	gAimPos1 : {REDUND_UNREPLICABLE} ARRAY[0..13] OF INT := [5(0),1,0,2,5(0),4]; (*copy of target positions that are modyfied during program *)
	gElementsArray : ARRAY[0..13] OF USINT;
	gIsPosGood : ARRAY[0..13] OF BOOL := [11(0),3(1)]; (*vision system feedback that tells if there is a black pad *)
	gPosBuffor : ARRAY[0..13] OF BOOL; (*positions that can be used as buffor *)
END_VAR
VAR CONSTANT
	gRobPos : ARRAY[0..13] OF McPointType := [(Pos:=(X:=515,Y:=280,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=515,Y:=200,Z:=68),Orient:=(Angle1:=0,Angle2:=180)),(Pos:=(X:=515,Y:=100,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=515,Y:=0,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=515,Y:=-100,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=515,Y:=-200,Z:=68),Orient:=(Angle1:=0,Angle2:=180)),(Pos:=(X:=515,Y:=-280,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=410,Y:=300,Z:=68),Orient:=(Angle1:=0,Angle2:=180)),(Pos:=(X:=410,Y:=200,Z:=68),Orient:=(Angle1:=0,Angle2:=180)),(Pos:=(X:=410,Y:=100,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=410,Y:=0,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=410,Y:=-100,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=410,Y:=-200,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)),(Pos:=(X:=410,Y:=-300,Z:=68),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0))]; (*predefined robot positions*)
END_VAR
VAR
	gSafety : gSafeType; (*safety*)
	gSquareArray : ARRAY[0..13] OF BOOL; (*1 IF is square in i position*)
	gSwapFlag : BOOL; (*enables swap mode *)
	gSwapMap : ARRAY[0..13] OF BOOL; (*(SWAP) Pleaces that can be used to swap*)
	gSwapPoses : ARRAY[0..2] OF McPointType; (*(SWAP) table of positions that will be used to swap procedure*)
END_VAR
VAR CONSTANT
	HOME : McPointType := (Pos:=(X:=435.9,Y:=0,Z:=685),Orient:=(Angle1:=0,Angle2:=90,Angle3:=0)); (*Home pose *)
END_VAR
VAR
	i : USINT;
	Index : ARRAY[0..2] OF INT := [1,2,4]; (*defines order of moves *)
END_VAR
VAR CONSTANT
	LowSpeed : UDINT := 6000;
END_VAR
VAR
	gCompliteFlag : BOOL;
END_VAR
VAR CONSTANT
	MaxSpeed : UDINT := 30000;
END_VAR
VAR
	MpPackMLCore_0 : MpPackMLCore; (*PACK ML*)
	MpPackMLMode_Auto : MpPackMLMode; (*PACK ML AUTO*)
	MpPackMLMode_Manual : MpPackMLMode; (*PACK ML MANUAL*)
	MpPackMLMode_SemiAuto : MpPackMLMode; (*PACK ML SEMIAUTO*)
	P0 : McPointType := (Pos:=(X:=435,Y:=0,Z:=405),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0));
	P1 : McPointType := (Pos:=(X:=510,Y:=-280,Z:=70),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)); (*first robot position *)
	P1up : McPointType := (Pos:=(X:=510,Y:=-280,Z:=120),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)); (*position over first robot position*)
	P2 : McPointType := (Pos:=(X:=410,Y:=200,Z:=70),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)); (*second robot position*)
	P2up : McPointType := (Pos:=(X:=410,Y:=200,Z:=120),Orient:=(Angle1:=0,Angle2:=180,Angle3:=0)); (*position over second robot  position*)
	PixelRange_0 : PixelCounterLimits;
	pom : ARRAY[0..13] OF BOOL;
	PZ : McPointType := (Pos:=(X:=435,Y:=0,Z:=685),Orient:=(Angle1:=0,Angle2:=90,Angle3:=0));
END_VAR
VAR RETAIN
	RestorePos : ARRAY[0..5] OF McAcpAxRestorePosType; (*Comau Home Position*)
END_VAR
VAR
	y : USINT; (*is used to execute moves *)
	emptyPos : USINT;
	gSwapEnable : ARRAY[0..13] OF BOOL; (*list of targets that can be swaped*)
	z : INT;
	gDemoActPos : ARRAY[0..13] OF INT;
END_VAR
